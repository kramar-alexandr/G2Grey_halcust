external inner procedure ExtractObj(string,var Integer,var string);
external inner procedure FindUserMailboxName(string,var string,var string);
external inner function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external inner function string 255 AddStr(string,string,string);

enum begin
  kAcceptanceTaskEMail = 0,
  kAcceptanceTaskSMS = 1,
  kAcceptanceTaskAlert = 2,
  kAcceptanceTaskNone = 3
end;

updating function Boolean CreateAccepatanceEMail(string sender,record AcceptanceRulesVc Acptr,string recipient,var array record MailVc aMailr,var Integer acnt)
begin
  Boolean res;
  record MailVc Mailr;  
  row MailVc Mailrw;
  string 255 mailboxnr,mailboxname;
  string 255 user;
  Integer pos;
  Boolean storef;
  record LTxtVc LTxtr;
  Integer i,rwcnt;
  string 255 tstr;

  RecordNew(Mailr);
  pos = 0;
  ExtractObj(sender,pos,user);
  while (nonblank(user)) begin
    FindUserMailboxName(user,mailboxnr,mailboxname);
    if (nonblank(mailboxname)) then begin
      ClearRow(Mailr,Mailrw,1);
      Mailrw.RowTyp = kMailRowTypeFrom;
      Mailrw.AddrCode = mailboxname;
      mailrw.Mailbox = StringToLongInt(mailboxnr);
      MatRowPut(Mailr,1,Mailrw);
      storef = true;
    end;
    ExtractObj(sender,pos,user);
  end;
  if (storef==false) then begin
    goto LCreateAccepatanceEMail;
  end;  

  FindUserMailboxName(recipient,mailboxnr,mailboxname);
  if (nonblank(mailboxname)) then begin
    ClearRow(Mailr,Mailrw,1);
    Mailrw.RowTyp = kMailRowTypeTo;
    Mailrw.AddrCode = mailboxname;
    mailrw.Mailbox = StringToLongInt(mailboxnr);
    MatRowPut(Mailr,1,Mailrw);
  end;

  Mailr.Header = Mailr.Header & Acptr.Subject;
  LTxtr.Code = Acptr.StdTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    rwcnt = LineTextCnt(LTxtr);
    for (i=0;i<rwcnt;i=i+1) begin
      tstr = LineTextGet(LTxtr,i);
      LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
    end;    
    AddCRToText(Mailr);
  end;
  Mailr.SendFlag = 1;
  Mailr.SerNr = NextSerNr("MailVc",Mailr.TransDate,-1,false,"");
  if (Mailr.SerNr>0) then begin
    if (RecordStore(Mailr,false)) then begin
      res = true;
      aMailr[acnt] = Mailr;
      acnt = acnt + 1;
    end;
  end;
LCreateAccepatanceEMail:;  
  CreateAccepatanceEMail = res;
  return;
end;

updating function Boolean CreateAccepatanceEMails(string sender,record AcceptanceRulesVc Acptr,row AcceptanceRulesVc Acptrw,var array record MailVc aMailr,var Integer acnt)
begin
  Boolean res;
  string 255 user;
  Integer pos;
  Integer i,rwcnt;

  pos = 0;
  ExtractObj(Acptrw.AcceptanceBy,pos,user);
  while (nonblank(user)) begin
    res = CreateAccepatanceEMail(sender,Acptr,user,aMailr,acnt);
    ExtractObj(Acptrw.AcceptanceBy,pos,user);
  end;

LCreateAccepatanceEMails:;  
  CreateAccepatanceEMails = res;
  return;
end;

function string 255 AcceptanceTaskSubject(record AcceptanceRulesVc Acptr,Integer strid0,string fromsernr,Integer strid1,string contact,Integer strid2,val amount,Integer format,string curncy)
begin
  string 255 res;
  record SysFormatBlock SysFormatRec;
  
  BlockLoad(SysFormatRec);
  if (blank(Acptr.Subject)) then begin
    res = USetStr(strid0);
  end else begin
    res = Acptr.Subject;
  end;
  res = AddStr(res,fromsernr," ");
  res = AddStr(res,USetStr(strid1)," ");
  res = AddStr(res,contact," ");
  res = AddStr(res,USetStr(strid2)," ");
  res = AddStr(res,ValToString(amount,format,SysFormatRec.thousSep,SysFormatRec.decimalPt,0)," ");
  res = AddStr(res,curncy," ");
  AcceptanceTaskSubject = res;
  return;
end;

updating function Boolean CreateAcceptanceTask(string fromfilename,string fromsernr,Integer task,string sender,string recipient,val amount,string curncy,string contact,record AcceptanceRulesVc Acptr,row AcceptanceRulesVc Acptrw)
begin
  Boolean res;
  record ActVc Actr;
  string 255 mailboxnr,mailboxname;
  Integer pos;
  Boolean storef;
  record LTxtVc LTxtr;
  Integer i,rwcnt;
  string 255 tstr;
  transaction string 255 gAlarmVcSender;
  transaction string 255 gAlarmVcStdTxt;
    
  RecordNew(Actr);
  Actr.MainPersons = recipient;
  switch (task) begin
    case kAcceptanceTaskEMail:
      Actr.AlarmType = 3;
      Actr.AlarmWhen = 0;
      Actr.AlarmUnits = 0;
    case kAcceptanceTaskSMS:
      Actr.AlarmType = 2;
      Actr.AlarmWhen = 0;
      Actr.AlarmUnits = 0;
    case kAcceptanceTaskAlert:
      Actr.AlarmType = 1;
      Actr.AlarmWhen = 0;
      Actr.AlarmUnits = 0;
  end;
  Actr.TodoFlag = kTodoFlagTodo;
  Actr.CalTimeFlag = kCalTimeFlagNoshow;
  Actr.SymbNr = 3;
  Actr.ActType = Acptr.AcceptanceActType;
  Actr.Comment = USetStr(22410);
  Actr.FromFileName = fromfilename;
  Actr.FromSerNr = fromsernr;

  switch (Actr.FromFileName) begin
    case "POVc": 
      Actr.Comment = AcceptanceTaskSubject(Acptr,31013,fromsernr,31015,contact,7819,amount,M4Val,curncy);// Edit ************************** Wednesday, 17 October 2012 10:26:29
    case "IVVc": 
      Actr.Comment = AcceptanceTaskSubject(Acptr,22417,fromsernr,22422,contact,22423,amount,M4Val,curncy);
    case "TBBUVc": 
      Actr.Comment = AcceptanceTaskSubject(Acptr,22418,fromsernr,22422,contact,22423,amount,M4Val,curncy);
    case "VIVc": 
      Actr.Comment = AcceptanceTaskSubject(Acptr,22411,fromsernr,22421,contact,22423,amount,M4Val,curncy);
    case "ExpVc": 
      Actr.Comment = AcceptanceTaskSubject(Acptr,22413,fromsernr,22420,contact,22423,amount,M4Val,curncy);
    case "IntORVc": 
      Actr.Comment = AcceptanceTaskSubject(Acptr,22414,fromsernr,22420,contact,22423,amount,M4Val,curncy);
    case "QTVc": 
      Actr.Comment = AcceptanceTaskSubject(Acptr,31014,fromsernr,12487,contact,7819,amount,M4Val,curncy);// Edit ************************** Wednesday, 17 October 2012 10:26:31
    case "ORVc": 
      Actr.Comment = AcceptanceTaskSubject(Acptr,22416,fromsernr,22422,contact,22423,amount,M4Val,curncy);
    case "PUVc":
      Actr.Comment = AcceptanceTaskSubject(Acptr,22419,fromsernr,22421,contact,22423,amount,M4Val,curncy);
    case "SDVc":
      Actr.Comment = AcceptanceTaskSubject(Acptr,22425,fromsernr,22420,contact,22423,amount,M4Val,curncy);
    case "OPVc":
      Actr.Comment = AcceptanceTaskSubject(Acptr,22427,fromsernr,22420,contact,22423,amount,M4Val,curncy);
    case "LeaveApplicationVc":
      Actr.Comment = AcceptanceTaskSubject(Acptr,22428,fromsernr,22420,contact,22423,amount,M4UVal,curncy);
    case "LeaveTransferVc":
      Actr.Comment = AcceptanceTaskSubject(Acptr,22429,fromsernr,22420,contact,22423,amount,M4UVal,curncy);
  end;
  gAlarmVcSender = sender;
  gAlarmVcStdTxt = Acptr.StdTxt;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
  if (Actr.SerNr>0) then begin
    if (RecordStore(Actr,false)) then begin
      res = true;
    end;
  end;
LCreateAcceptanceTask:;  
  CreateAcceptanceTask = res;
  return;
end;

updating function Boolean CreateAcceptanceTasks(Integer task,string fromfilename,string fromsernr,string sender,val amount,string crncy,string contact,record AcceptanceRulesVc Acptr,row AcceptanceRulesVc Acptrw)
begin
  Boolean res;
  string 255 recipient;
  Integer pos;

  switch (Acptrw.ActionType) begin
    case kAcceptanceTypeActionByOne:
      pos = 0;
      ExtractObj(Acptrw.AcceptanceBy,pos,recipient);
      while (nonblank(recipient)) begin
        res = CreateAcceptanceTask(fromfilename,fromsernr,task,sender,recipient,amount,crncy,contact,Acptr,Acptrw);
        ExtractObj(Acptrw.AcceptanceBy,pos,recipient);
      end;
    case kAcceptanceTypeActionByAll:
      pos = 0;
      ExtractObj(Acptrw.AcceptanceBy,pos,recipient);
      while (nonblank(recipient)) begin
        res = CreateAcceptanceTask(fromfilename,fromsernr,task,sender,recipient,amount,crncy,contact,Acptr,Acptrw);
        ExtractObj(Acptrw.AcceptanceBy,pos,recipient);
      end;
  end;
LCreateAcceptanceTasks:;  
  CreateAcceptanceTasks = res;
  return;
end;

global
updating procedure CreateAcceptanceAlert(string fromfilename,string fromsernr,string sender,val amount,string crncy,string contact,
                                          record AcceptanceRulesVc Acptr,row AcceptanceRulesVc Acptrw)
begin
  switch (Acptrw.ActionResult) begin
    case kAcceptanceTypeResultNone:
      CreateAcceptanceTasks(kAcceptanceTaskNone,fromfilename,fromsernr,sender,amount,crncy,contact,Acptr,Acptrw);
    case kAcceptanceTypeResultEmail:
      CreateAcceptanceTasks(kAcceptanceTaskEMail,fromfilename,fromsernr,sender,amount,crncy,contact,Acptr,Acptrw);
    case kAcceptanceTypeResultSMS:
      CreateAcceptanceTasks(kAcceptanceTaskSMS,fromfilename,fromsernr,sender,amount,crncy,contact,Acptr,Acptrw);
    case kAcceptanceTypeResultAlert:
      CreateAcceptanceTasks(kAcceptanceTaskAlert,fromfilename,fromsernr,sender,amount,crncy,contact,Acptr,Acptrw);
  end;
  return;
end;

function Boolean ReadAcceptanceRules(Integer kregister,string custcode,var record AcceptanceRulesVc Acptr)
begin
  Boolean res;
  Integer keys;
  
  Acptr.Register = kregister;
  keys = 1;
  if (nonblank(custcode)) then begin
    Acptr.CustCode = custcode;
    keys = 2;
  end;
  res = ReadFirstMain(Acptr,keys,true);
  if (res==false) then begin
    if (nonblank(custcode)) then begin
      res = ReadAcceptanceRules(kregister,"",Acptr);
    end;
  end;
  ReadAcceptanceRules = res;
  return;
end;

global
function Boolean AcceptanceRulesExists(Integer kregister,string custcode)
begin
  Boolean res;
  record AcceptanceRulesVc Acptr;
  
  if (ReadAcceptanceRules(kregister,custcode,Acptr)) then begin
    res = true;
  end;
  AcceptanceRulesExists = res;
  return;
end;


global
function val GetAcceptanceSum_POVc(record POVc POr)
begin
  val res;
  
  res = MulRateToBase1(POr.CurncyCode,POr.Sum4,POr.FrRate,POr.ToRateB1,POr.ToRateB2,POr.BaseRate1,POr.BaseRate2,DefaultCurRoundOff);
  GetAcceptanceSum_POVc = res;
  return;
end;

global
function val GetAcceptanceSum_IVVc(record IVVc IVr)
begin
  val res;
  
  res = MulRateToBase1(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
  GetAcceptanceSum_IVVc = res;
  return;
end;

global
function val GetAcceptanceSum_TBBUVc(record TBBUVc TBBUr)
begin
  val res;
  
  res = MulRateToBase1(TBBUr.CurncyCode,TBBUr.TotSum,TBBUr.FrRate,TBBUr.ToRateB1,TBBUr.ToRateB2,TBBUr.BaseRate1,TBBUr.BaseRate2,DefaultCurRoundOff);
  GetAcceptanceSum_TBBUVc = res;
  return;
end;

global
function val GetAcceptanceSum_VIVc(record VIVc VIr)
begin
  val res;
  
  res = MulRateToBase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
  GetAcceptanceSum_VIVc = res;
  return;
end;

global
function val GetAcceptanceSum_ORVc(record ORVc ORr)
begin
  val res;
  
  res = MulRateToBase1(ORr.CurncyCode,ORr.Sum4,ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,DefaultCurRoundOff);
  GetAcceptanceSum_ORVc = res;
  return;
end;

global
function val GetAcceptanceSum_QTVc(record QTVc QTr)
begin
  val res;
  
  res = MulRateToBase1(QTr.CurncyCode,QTr.Sum4,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
  GetAcceptanceSum_QTVc = res;
  return;
end;

global
function val GetAcceptanceSum_IntORVc(record IntORVc IntORr)
begin
  val res;
  
  res = IntORr.Total;
  GetAcceptanceSum_IntORVc = res;
  return;
end;

global
function val GetAcceptanceSum_ExpVc(record ExpVc Expr)
begin
  val res;
  
  res = MulRateToBase1(Expr.CurncyCode,Expr.PayVal,Expr.FrRate,Expr.ToRateB1,Expr.ToRateB2,Expr.BaseRate1,Expr.BaseRate2,DefaultCurRoundOff);
  GetAcceptanceSum_ExpVc = res;
  return;
end;

global
function val GetAcceptanceSum_PUVc(record PUVc PUr)
begin
  val res;
  
  res = MulRateToBase1(PUr.CurncyCode,PUr.PayVal,PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,DefaultCurRoundOff);
  GetAcceptanceSum_PUVc = res;
  return;
end;

global
function val GetAcceptanceSum_SDVc(record SDVc SDr)
begin
  val res;
  row SDVc SDrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(SDr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SDr,i,SDrw);
    res = res + SDrw.FIFO;
  end;
  
  GetAcceptanceSum_SDVc = res;
  return;
end;

global
function val GetAcceptanceSum_OPVc(record OPVc OPr)
begin
  val res;
  Integer i,rwcnt;
  row OPVc OPrw;
  
  rwcnt = MatRowCnt(OPr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OPr,i,OPrw);
    res = res + MulRateToBase1(OPrw.BankCurncy,OPrw.BankVal,OPrw.FrRateBankVal,OPrw.ToRateB1BankVal,OPrw.ToRateB2BankVal,OPrw.BaseRate1BankVal,OPrw.BaseRate1BankVal,DefaultCurRoundOff);
  end;
  GetAcceptanceSum_OPVc = res;
  return;
end;

global
function val GetAcceptanceSum_LeaveApplicationVc(record LeaveApplicationVc LAr)
begin
  val res;
  
  GetAcceptanceSum_LeaveApplicationVc = res;
  return;
end;

global
function val GetAcceptanceSum_LeaveTransferVc(record LeaveTransferVc LTr)
begin
  val res;
  
  GetAcceptanceSum_LeaveTransferVc = res;
  return;
end;

global
updating function Integer SendForAcceptance_POVc(var record POVc POr)
begin
  Integer err,resAcceptanceStatus;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  
  resAcceptanceStatus = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptancePO,POr.VECode,Acptr)) then begin
    bc1v = GetAcceptanceSum_POVc(POr);
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (POr.AcceptanceStatus) begin
          case kAcceptanceStateNotStarted:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          case kAcceptanceStateNotRequested:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          otherwise
            err = 22400;
        end;
        i = rwcnt;
      end;
    end;
  end;
  POr.AcceptanceStatus = resAcceptanceStatus;
  switch (resAcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    case kAcceptanceStatePending:
      CreateAcceptanceAlert("POVc",POr.SerNr,POr.SalesMan,POr.Sum4,POr.CurncyCode,POr.VECode,Acptr,foundAcptrw);
  end;
  SendForAcceptance_POVc = err;
  return;
end;

global
updating function Integer SendForAcceptance_IVVc(var record IVVc IVr)
begin
  Integer err,resAcceptanceStatus;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  
  resAcceptanceStatus = kAcceptanceStateNotRequired;
  switch (IVr.InvType) begin
    case kInvoiceTypeCash:
      Acptr.Register = kAcceptanceCashIV;
    case kInvoiceTypeCredit:
      Acptr.Register = kAcceptanceCredIV;
    otherwise
      Acptr.Register = kAcceptanceIV;
  end;
  if (ReadAcceptanceRules(Acptr.Register,IVr.CustCode,Acptr)) then begin
    bc1v = GetAcceptanceSum_IVVc(IVr);
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (IVr.AcceptanceStatus) begin
          case kAcceptanceStateNotStarted:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          case kAcceptanceStateNotRequested:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          otherwise
            err = 22400;
        end;
        i = rwcnt;
      end;
    end;
  end;
  IVr.AcceptanceStatus = resAcceptanceStatus;
  switch (resAcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    case kAcceptanceStatePending:
      CreateAcceptanceAlert("IVVc",IVr.SerNr,IVr.SalesMan,IVr.Sum4,IVr.CurncyCode,IVr.CustCode,Acptr,foundAcptrw);
  end;
  SendForAcceptance_IVVc = err;
  return;
end;

global
updating function Integer SendForAcceptance_TBBUVc(var record TBBUVc TBBUr)
begin
  Integer err,resAcceptanceStatus;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  
  resAcceptanceStatus = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptanceTBBU,TBBUr.CustCode,Acptr)) then begin
    bc1v = GetAcceptanceSum_TBBUVc(TBBUr);
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (TBBUr.AcceptanceStatus) begin
          case kAcceptanceStateNotStarted:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          case kAcceptanceStateNotRequested:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          otherwise
            err = 22400;
        end;
        i = rwcnt;
      end;
    end;
  end;
  TBBUr.AcceptanceStatus = resAcceptanceStatus;
  switch (resAcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    case kAcceptanceStatePending:
      CreateAcceptanceAlert("TBBUVc",TBBUr.PRCode,TBBUr.SalesMan,TBBUr.TotSum,TBBUr.CurncyCode,TBBUr.PRCode,Acptr,foundAcptrw);
  end;
  SendForAcceptance_TBBUVc = err;
  return;
end;

global
updating function Integer SendForAcceptance_VIVc(var record VIVc VIr)
begin
  Integer err,resAcceptanceStatus;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  
  resAcceptanceStatus = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptanceVI,VIr.VECode,Acptr)) then begin
    bc1v = GetAcceptanceSum_VIVc(VIr);
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (VIr.AcceptanceStatus) begin
          case kAcceptanceStateNotStarted:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          case kAcceptanceStateNotRequested:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          otherwise
            err = 22400;
        end;
        i = rwcnt;
      end;
    end;
  end;
  VIr.AcceptanceStatus = resAcceptanceStatus;
  switch (resAcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    case kAcceptanceStatePending:
      CreateAcceptanceAlert("VIVc",VIr.SerNr,VIr.Sign,VIr.PayVal,VIr.CurncyCode,VIr.VECode,Acptr,foundAcptrw);
  end;
  SendForAcceptance_VIVc = err;
  return;
end;

global
updating function Integer SendForAcceptance_ORVc(var record ORVc ORr)
begin
  Integer err,resAcceptanceStatus;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  
  resAcceptanceStatus = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptanceOR,ORr.CustCode,Acptr)) then begin
    bc1v = GetAcceptanceSum_ORVc(ORr);
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (ORr.AcceptanceStatus) begin
          case kAcceptanceStateNotStarted:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          case kAcceptanceStateNotRequested:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          otherwise
            err = 22400;
        end;
        i = rwcnt;
      end;
    end;
  end;
  ORr.AcceptanceStatus = resAcceptanceStatus;
  switch (resAcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    case kAcceptanceStatePending:
      CreateAcceptanceAlert("ORVc",ORr.SerNr,ORr.SalesMan,ORr.Sum4,ORr.CurncyCode,ORr.CustCode,Acptr,foundAcptrw);
  end;
  SendForAcceptance_ORVc = err;
  return;
end;

global
updating function Integer SendForAcceptance_QTVc(var record QTVc QTr)
begin
  Integer err,resAcceptanceStatus;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
    
  resAcceptanceStatus = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptanceQT,QTr.CustCode,Acptr)) then begin
    bc1v = GetAcceptanceSum_QTVc(QTr);
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (QTr.AcceptanceStatus) begin
          case kAcceptanceStateNotStarted:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          case kAcceptanceStateNotRequested:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          otherwise
            err = 22400;
        end;
        i = rwcnt;
      end;
    end;
  end;
  QTr.AcceptanceStatus = resAcceptanceStatus;
  switch (resAcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    case kAcceptanceStatePending:
      CreateAcceptanceAlert("QTVc",QTr.SerNr,QTr.SalesMan,QTr.Sum4,QTr.CurncyCode,QTr.CustCode,Acptr,foundAcptrw);
  end;
  SendForAcceptance_QTVc = err;
  return;
end;

global
updating function Integer SendForAcceptance_IntORVc(var record IntORVc IntORr)
begin
  Integer err,resAcceptanceStatus;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  
  resAcceptanceStatus = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptanceIntOR,"",Acptr)) then begin
//    bc1v = MulRateToBase1(IntORr.CurncyCode,IntORr.Sum4,IntORr.FrRate,IntORr.ToRateB1,IntORr.ToRateB2,IntORr.BaseRate1,IntORr.BaseRate2,DefaultCurRoundOff);
    bc1v = GetAcceptanceSum_IntORVc(IntORr);
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (IntORr.AcceptanceStatus) begin
          case kAcceptanceStateNotStarted:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          case kAcceptanceStateNotRequested:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          otherwise
            err = 22400;
        end;
        i = rwcnt;
      end;
    end;
  end;
  IntORr.AcceptanceStatus = resAcceptanceStatus;
  switch (resAcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    case kAcceptanceStatePending:
      CreateAcceptanceAlert("IntORVc",IntORr.SerNr,IntORr.OurUser,IntORr.Total,"",IntORr.OurUser,Acptr,foundAcptrw);
  end;
  SendForAcceptance_IntORVc = err;
  return;
end;

global
updating function Integer SendForAcceptance_ExpVc(var record ExpVc Expr)
begin
  Integer err,resAcceptanceStatus;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  
  resAcceptanceStatus = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptanceExp,"",Acptr)) then begin
    bc1v = GetAcceptanceSum_ExpVc(Expr);
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (Expr.AcceptanceStatus) begin
          case kAcceptanceStateNotStarted:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          case kAcceptanceStateNotRequested:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          otherwise
            err = 22400;
        end;
        i = rwcnt;
      end;
    end;
  end;
  Expr.AcceptanceStatus = resAcceptanceStatus;
  switch (resAcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    case kAcceptanceStatePending:
      CreateAcceptanceAlert("ExpVc",Expr.SerNr,Expr.Person,Expr.PayVal,Expr.CurncyCode,Expr.Person,Acptr,foundAcptrw);
  end;
  SendForAcceptance_ExpVc = err;
  return;
end;

global
updating function Integer SendForAcceptance_PUVc(var record PUVc PUr)
begin
  Integer err,resAcceptanceStatus;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  
  resAcceptanceStatus = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptancePU,PUr.VECode,Acptr)) then begin
    bc1v = GetAcceptanceSum_PUVc(PUr);
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (PUr.AcceptanceStatus) begin
          case kAcceptanceStateNotStarted:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          case kAcceptanceStateNotRequested:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          otherwise
            err = 22400;
        end;
        i = rwcnt;
      end;
    end;
  end;
  PUr.AcceptanceStatus = resAcceptanceStatus;
  switch (resAcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    case kAcceptanceStatePending:
      CreateAcceptanceAlert("PUVc",PUr.SerNr,"",PUr.PayVal,PUr.CurncyCode,PUr.VECode,Acptr,foundAcptrw);
  end;
  SendForAcceptance_PUVc = err;
  return;
end;

global
updating function Integer SendForAcceptance_SDVc(var record SDVc SDr)
begin
  Integer err,resAcceptanceStatus;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  
  resAcceptanceStatus = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptanceSD,"",Acptr)) then begin
    bc1v = GetAcceptanceSum_SDVc(SDr);
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (SDr.AcceptanceStatus) begin
          case kAcceptanceStateNotStarted:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          case kAcceptanceStateNotRequested:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          otherwise
            err = 22400;
        end;
        i = rwcnt;
      end;
    end;
  end;
  SDr.AcceptanceStatus = resAcceptanceStatus;
  switch (resAcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    case kAcceptanceStatePending:
      CreateAcceptanceAlert("SDVc",SDr.SerNr,"",GetAcceptanceSum_SDVc(SDr),"","",Acptr,foundAcptrw);
  end;
  SendForAcceptance_SDVc = err;
  return;
end;

global
updating function Integer SendForAcceptance_OPVc(var record OPVc OPr)
begin
  Integer err,resAcceptanceStatus;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  
  resAcceptanceStatus = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptanceOP,"",Acptr)) then begin
    bc1v = GetAcceptanceSum_OPVc(OPr);
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (OPr.AcceptanceStatus) begin
          case kAcceptanceStateNotStarted:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          case kAcceptanceStateNotRequested:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          otherwise
            err = 22400;
        end;
        i = rwcnt;
      end;
    end;
  end;
  OPr.AcceptanceStatus = resAcceptanceStatus;
  switch (resAcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    case kAcceptanceStatePending:
//      CreateAcceptanceAlert("OPVc",OPr.SerNr,OPr.SalesMan,OPr.Sum4,OPr.CurncyCode,OPr.CustCode,Acptr,foundAcptrw);
  end;
  SendForAcceptance_OPVc = err;
  return;
end;

global
function Integer SetAcceptanceStatus(Integer acceptanceregister,string custcode,val bc1v)
begin
  Integer res;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  Integer i,rwcnt;

  res = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(acceptanceregister,custcode,Acptr)) then begin
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (Acptrw.ActionType) begin
          case kAcceptanceTypeActionNone:
            res = kAcceptanceStateNotRequired;
          case kAcceptanceTypeActionByOne:
            res = kAcceptanceStateNotRequested;
          case kAcceptanceTypeActionByAll:
            res = kAcceptanceStateNotRequested;
        end;
        i = rwcnt;
      end;
    end;
  end;
  SetAcceptanceStatus = res;
  return;
end;

global
function Boolean AcceptanceTasksForCurrentLevelDone(string FromFileName,string FromSerNr,string AcceptanceActType,row AcceptanceRulesVc Acptrw)
begin
  Boolean res;
  record ActVc Actr;
  Boolean found,testf;
  string 255 index;
  Integer pos;
  string 255 user;
  
  res = true;
  pos = 0;
  ExtractObj(Acptrw.AcceptanceBy,pos,user);
  while (nonblank(user)) begin
    ResetLoop(Actr);
    index = "ActTypeUserMain:" & user;  
    Actr.ActType = AcceptanceActType;
    Actr.TodoFlag = kTodoFlagTodo;
    found = true;
    while (LoopKey(index,Actr,2,found)) begin
      if (Actr.ActType!=AcceptanceActType) then begin found = false; end;
      if (Actr.TodoFlag!=kTodoFlagTodo) then begin found = false; end;
      if (found) then begin
        testf = true;
        if (Actr.FromFileName!=FromFileName) then begin testf = false; end;
        if (Actr.FromSerNr!=FromSerNr) then begin testf = false; end;
        if (testf) then begin
          if (Actr.OKFlag==0) then begin
            res = false;
            goto LAcceptanceTasksForCurrentLevelDone;
          end;
        end;
      end;
    end;
    ExtractObj(Acptrw.AcceptanceBy,pos,user);
  end;
LAcceptanceTasksForCurrentLevelDone:;  
  AcceptanceTasksForCurrentLevelDone = res;
  return;
end;

function Boolean AcceptanceTasksExistForUsers(string FromFileName,string FromSerNr,string AcceptanceActType,row AcceptanceRulesVc Acptrw)
begin
  Boolean res;
  record ActVc Actr;
  Boolean found,testf;
  string 255 index;
  Integer pos;
  string 255 user;

  pos = 0;
  ExtractObj(Acptrw.AcceptanceBy,pos,user);
  while (nonblank(user)) begin
    res = false;
    ResetLoop(Actr);
    index = "ActTypeUserMain:" & user;  
    Actr.ActType = AcceptanceActType;
    Actr.TodoFlag = kTodoFlagTodo;
    found = true;
    while (LoopKey(index,Actr,2,found)) begin
      if (Actr.ActType!=AcceptanceActType) then begin found = false; end;
      if (Actr.TodoFlag!=kTodoFlagTodo) then begin found = false; end;
      if (found) then begin
        testf = true;
        if (Actr.FromFileName!=FromFileName) then begin testf = false; end;
        if (Actr.FromSerNr!=FromSerNr) then begin testf = false; end;
        if (testf) then begin
          res = true;
          found = false;
        end;
      end;
    end;
    ExtractObj(Acptrw.AcceptanceBy,pos,user);
  end;
LAcceptanceTasksExistForUsers:;  
  AcceptanceTasksExistForUsers = res;
  return;
end;

function Boolean AcceptanceTasksExistForAllLevels(string FromFileName,string FromSerNr,record AcceptanceRulesVc Acptr,Integer currow)
begin
  Boolean res;
  row AcceptanceRulesVc Acptrw;
  Integer i,rwcnt;
                            
  res = true;
  rwcnt = MatRowCnt(Acptr);
  for (i=currow;i<rwcnt;i=i+1) begin
    MatRowGet(Acptr,i,Acptrw);
    res = AcceptanceTasksExistForUsers(FromFileName,FromSerNr,Acptr.AcceptanceActType,Acptrw);
    if (res==false) then begin
      goto LAcceptanceTasksExistForAllLevels;
    end;
    res = AcceptanceTasksForCurrentLevelDone(FromFileName,FromSerNr,Acptr.AcceptanceActType,Acptrw);
    if (res==false) then begin
      goto LAcceptanceTasksExistForAllLevels;
    end;
    switch (Acptrw.NextLevel) begin
      case kAcceptanceNextLevelRequired:
        res = AcceptanceTasksExistForAllLevels(FromFileName,FromSerNr,Acptr,i+1);
        if (res==false) then begin
          goto LAcceptanceTasksExistForAllLevels;
        end;
      case kAcceptanceNextLevelNone:
        goto LAcceptanceTasksExistForAllLevels;
    end;
  end;
LAcceptanceTasksExistForAllLevels:;  
  AcceptanceTasksExistForAllLevels = res;
  return;
end;

updating procedure SetOtherPersonsActivityTypestoNoNeed(string FromFileName,string FromSerNr,record ActVc acceptedActr,record AcceptanceRulesVc Acptr,row AcceptanceRulesVc Acptrw)
begin
  Integer pos;
  string 255 user;
  record ActVc Actr;
  record ActVc oldActr;
  Boolean found,testf;
  string 255 index;

  pos = 0;
  ExtractObj(Acptrw.AcceptanceBy,pos,user);
  while (nonblank(user)) begin
    if (SetInSet(user,acceptedActr.MainPersons)==false) then begin
      ResetLoop(Actr);
      index = "ActTypeUserMain:" & user;  
      Actr.ActType = Acptr.AcceptanceActType;
      Actr.TodoFlag = kTodoFlagTodo;
      found = true;
      while (LoopKey(index,Actr,2,found)) begin
        if (Actr.ActType!=Acptr.AcceptanceActType) then begin found = false; end;
        if (Actr.TodoFlag!=kTodoFlagTodo) then begin found = false; end;
        if (found) then begin
          testf = true;
          if (Actr.FromFileName!=FromFileName) then begin testf = false; end;
          if (Actr.FromSerNr!=FromSerNr) then begin testf = false; end;
          if (Actr.OKFlag!=0) then begin testf = false; end;
          if (testf) then begin
            RecordCopy(oldActr,Actr);
            Actr.OKFlag = 1;
            if (nonblank(Acptr.NotNeededActType)) then begin
              Actr.ActResult = Acptr.NotNeededActType;
            end;
            if (RecordUpdate(oldActr,Actr,true)==0) then begin
              StepBack(Actr);
            end;
          end;
        end;
      end;
    end;
    ExtractObj(Acptrw.AcceptanceBy,pos,user);
  end;
  return;
end;

updating function Boolean AcceptanceTasksAcceptedForAllLevels(string fromfilename,string fromsernr,val bc1v,record ActVc Actr,record AcceptanceRulesVc Acptr)
begin
  Boolean testf;
  Integer i,rwcnt;
  row AcceptanceRulesVc Acptrw;  
  
  testf = true;
  rwcnt = MatRowCnt(Acptr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Acptr,i,Acptrw);
    if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
      switch (Acptrw.ActionType) begin
        case kAcceptanceTypeActionByOne:
          SetOtherPersonsActivityTypestoNoNeed(fromfilename,fromsernr,Actr,Acptr,Acptrw);
          switch (Acptrw.NextLevel) begin
            case kAcceptanceNextLevelRequired:
              testf = AcceptanceTasksExistForAllLevels(fromfilename,fromsernr,Acptr,i+1);
          end;
          i = rwcnt;
          goto LAcceptanceTasksAcceptedForAllLevels;
        case kAcceptanceTypeActionByAll:
          testf = AcceptanceTasksForCurrentLevelDone(fromfilename,fromsernr,Acptr.AcceptanceActType,Acptrw);
          if (testf) then begin
            switch (Acptrw.NextLevel) begin
              case kAcceptanceNextLevelRequired:
                testf = AcceptanceTasksExistForAllLevels(fromfilename,fromsernr,Acptr,i+1);
            end;
          end;
          i = rwcnt;
          goto LAcceptanceTasksAcceptedForAllLevels;
      end;
    end;
  end;
LAcceptanceTasksAcceptedForAllLevels:;  
  AcceptanceTasksAcceptedForAllLevels = testf;
  return;
end;

updating procedure SetAcceptanceTasksRejectedForAllLevels(string fromfilename,string fromsernr,val bc1v,record ActVc Actr,record AcceptanceRulesVc Acptr)
begin
  Boolean testf;
  Integer i,rwcnt;
  row AcceptanceRulesVc Acptrw;  
    
  testf = true;
  rwcnt = MatRowCnt(Acptr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Acptr,i,Acptrw);
    if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
      switch (Acptrw.ActionType) begin
        case kAcceptanceTypeActionByOne:
          SetOtherPersonsActivityTypestoNoNeed(fromfilename,fromsernr,Actr,Acptr,Acptrw);
          goto LSetAcceptanceTasksRejectedForAllLevels;
        case kAcceptanceTypeActionByAll:
          SetOtherPersonsActivityTypestoNoNeed(fromfilename,fromsernr,Actr,Acptr,Acptrw);
          goto LSetAcceptanceTasksRejectedForAllLevels;
      end;
    end;
  end;
LSetAcceptanceTasksRejectedForAllLevels:;  
  return;
end;

global
updating procedure SetLinkedRecordAcceptanceStatus(record ActVc Actr)
begin
  record ORVc ORr;
  record ORVc oldORr;
  record IntORVc IntORr;
  record IntORVc oldIntORr;
  record QTVc QTr;
  record QTVc oldQTr;
  record ExpVc Expr;
  record ExpVc oldExpr;
  record POVc POr;
  record POVc oldPOr;
  record IVVc IVr;
  record IVVc oldIVr;
  record VIVc VIr;
  record VIVc oldVIr;
  record TBBUVc TBBUr;
  record TBBUVc oldTBBUr;
  record PUVc PUr,oldPUr;
  record SDVc SDr,oldSDr;
  record OPVc OPr,oldOPr;
  record LeaveApplicationVc LAr;
  record LeaveApplicationVc oldLAr;
  record LeaveTransferVc LTr;
  record LeaveTransferVc oldLTr;
  record AcceptanceRulesVc Acptr;
  Integer i,rwcnt;
  Boolean testf;
  val bc1v;
  
  switch (Actr.FromFileName) begin
    case "LeaveApplicationVc":
      LAr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(LAr,1,true)) then begin
        if (ReadAcceptanceRules(kAcceptanceLeaveApplication,LAr.Employee,Acptr)) then begin
          bc1v = GetAcceptanceSum_LeaveApplicationVc(LAr);
          RecordCopy(oldLAr,LAr);
          if (Actr.ActResult==Acptr.RejectedActType) then begin
            LAr.AcceptanceStatus = kAcceptanceStateRejected;
            LAr.OKFlag = 0;
            RecordUpdate(oldLAr,LAr,true);
            SetAcceptanceTasksRejectedForAllLevels("LeaveApplicationVc",LAr.SerNr,bc1v,Actr,Acptr);
          end;
          if (Actr.ActResult==Acptr.AcceptedActType) then begin
            testf = AcceptanceTasksAcceptedForAllLevels("LeaveApplicationVc",LAr.SerNr,bc1v,Actr,Acptr);
            if (testf) then begin
              LAr.AcceptanceStatus = kAcceptanceStateApproved;
              LAr.OKFlag = 1;
              RecordUpdate(oldLAr,LAr,true);
            end;
          end;
        end;
      end;
    case "LeaveTransferVc":
      LTr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(LTr,1,true)) then begin
        if (ReadAcceptanceRules(kAcceptanceLeaveTransfer,LTr.Employee,Acptr)) then begin
          bc1v = GetAcceptanceSum_LeaveTransferVc(LTr);
          RecordCopy(oldLTr,LTr);
          if (Actr.ActResult==Acptr.RejectedActType) then begin
            LTr.AcceptanceStatus = kAcceptanceStateRejected;
            LTr.OKFlag = 0;
            RecordUpdate(oldLTr,LTr,true);
            SetAcceptanceTasksRejectedForAllLevels("LeaveTransferVc",LTr.SerNr,bc1v,Actr,Acptr);
          end;
          if (Actr.ActResult==Acptr.AcceptedActType) then begin
            testf = AcceptanceTasksAcceptedForAllLevels("LeaveTransferVc",LTr.SerNr,bc1v,Actr,Acptr);
            if (testf) then begin
              LTr.AcceptanceStatus = kAcceptanceStateApproved;
              LTr.OKFlag = 1;
              RecordUpdate(oldLTr,LTr,true);
            end;
          end;
        end;
      end;
    case "POVc":
      POr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(POr,1,true)) then begin
        if (ReadAcceptanceRules(kAcceptancePO,POr.VECode,Acptr)) then begin
          bc1v = GetAcceptanceSum_POVc(POr);
          RecordCopy(oldPOr,POr);
          if (Actr.ActResult==Acptr.RejectedActType) then begin
            POr.AcceptanceStatus = kAcceptanceStateRejected;
            //POr.AcceptanceStatus = kAcceptanceStateRejected;
            POr.AcceptanceStatus = kAcceptanceStateNotStarted;// Edit ************************** Tuesday, 15 January 2013 14:26:05
            POr.OKFlag = 0;
            RecordUpdate(oldPOr,POr,true);
            SetAcceptanceTasksRejectedForAllLevels("POVc",POr.SerNr,bc1v,Actr,Acptr);
          end;
          if (Actr.ActResult==Acptr.AcceptedActType) then begin
            testf = AcceptanceTasksAcceptedForAllLevels("POVc",POr.SerNr,bc1v,Actr,Acptr);
            if (testf) then begin
              POr.AcceptanceStatus = kAcceptanceStateApproved;
              POr.OKFlag = 1;
              RecordUpdate(oldPOr,POr,true);
            end;
          end;
        end;
      end;
    case "IVVc":
      IVr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(IVr,1,true)) then begin
        switch (IVr.InvType) begin
          case kInvoiceTypeCash:
            Acptr.Register = kAcceptanceCashIV;
          case kInvoiceTypeCredit:
            Acptr.Register = kAcceptanceCredIV;
          otherwise
            Acptr.Register = kAcceptanceIV;
        end;
        if (ReadAcceptanceRules(Acptr.Register,IVr.CustCode,Acptr)) then begin
          bc1v = GetAcceptanceSum_IVVc(IVr);
          RecordCopy(oldIVr,IVr);
          if (Actr.ActResult==Acptr.RejectedActType) then begin
            IVr.AcceptanceStatus = kAcceptanceStateRejected;
            RecordUpdate(oldIVr,IVr,true);
            SetAcceptanceTasksRejectedForAllLevels("IVVc",IVr.SerNr,bc1v,Actr,Acptr);
          end;
          if (Actr.ActResult==Acptr.AcceptedActType) then begin
            testf = AcceptanceTasksAcceptedForAllLevels("IVVc",IVr.SerNr,bc1v,Actr,Acptr);            
            if (testf) then begin
              IVr.AcceptanceStatus = kAcceptanceStateApproved;
              RecordUpdate(oldIVr,IVr,true);
            end;
          end;
        end;
      end;
    case "TBBUVc":
      TBBUr.PRCode = Actr.FromSerNr;
      if (ReadFirstMain(TBBUr,1,true)) then begin
        if (ReadAcceptanceRules(kAcceptanceTBBU,TBBUr.CustCode,Acptr)) then begin
          bc1v = GetAcceptanceSum_TBBUVc(TBBUr);
          RecordCopy(oldTBBUr,TBBUr);
          if (Actr.ActResult==Acptr.RejectedActType) then begin
            TBBUr.AcceptanceStatus = kAcceptanceStateRejected;
            RecordUpdate(oldTBBUr,TBBUr,true);
            SetAcceptanceTasksRejectedForAllLevels("TBBUVc",TBBUr.PRCode,bc1v,Actr,Acptr);
          end;
          if (Actr.ActResult==Acptr.AcceptedActType) then begin
            testf = AcceptanceTasksAcceptedForAllLevels("TBBUVc",TBBUr.PRCode,bc1v,Actr,Acptr);
            if (testf) then begin
              TBBUr.AcceptanceStatus = kAcceptanceStateApproved;
              RecordUpdate(oldTBBUr,TBBUr,true);
            end;
          end;
        end;
      end;
    case "VIVc":
      VIr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(VIr,1,true)) then begin
        if (ReadAcceptanceRules(kAcceptanceVI,VIr.VECode,Acptr)) then begin
          bc1v = GetAcceptanceSum_VIVc(VIr);
          RecordCopy(oldVIr,VIr);
          if (Actr.ActResult==Acptr.RejectedActType) then begin
            VIr.AcceptanceStatus = kAcceptanceStateRejected;
            VIr.OKFlag = 0;
            RecordUpdate(oldVIr,VIr,true);
            SetAcceptanceTasksRejectedForAllLevels("VIVc",VIr.SerNr,bc1v,Actr,Acptr);
          end;
          if (Actr.ActResult==Acptr.AcceptedActType) then begin
            testf = AcceptanceTasksAcceptedForAllLevels("VIVc",VIr.SerNr,bc1v,Actr,Acptr);            
            if (testf) then begin
              VIr.AcceptanceStatus = kAcceptanceStateApproved;
              RecordUpdate(oldVIr,VIr,true);
            end;
          end;
        end;
      end;
    case "ORVc":
      ORr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(ORr,1,true)) then begin
        if (ReadAcceptanceRules(kAcceptanceOR,ORr.CustCode,Acptr)) then begin
          bc1v = GetAcceptanceSum_ORVc(ORr);
          RecordCopy(oldORr,ORr);
          if (Actr.ActResult==Acptr.RejectedActType) then begin
            ORr.AcceptanceStatus = kAcceptanceStateRejected;
            ORr.OKFlag = 0;
            RecordUpdate(oldORr,ORr,true);
            SetAcceptanceTasksRejectedForAllLevels("ORVc",ORr.SerNr,bc1v,Actr,Acptr);
          end;
          if (Actr.ActResult==Acptr.AcceptedActType) then begin
            testf = AcceptanceTasksAcceptedForAllLevels("ORVc",ORr.SerNr,bc1v,Actr,Acptr);                        
            if (testf) then begin
              ORr.AcceptanceStatus = kAcceptanceStateApproved;
              ORr.OKFlag = 1;
              RecordUpdate(oldORr,ORr,true);
            end;
          end;
        end;
      end;
    case "QTVc":
      QTr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(QTr,1,true)) then begin
        if (ReadAcceptanceRules(kAcceptanceQT,QTr.CustCode,Acptr)) then begin
          bc1v = GetAcceptanceSum_QTVc(QTr);
          RecordCopy(oldQTr,QTr);
          if (Actr.ActResult==Acptr.RejectedActType) then begin
            //QTr.AcceptanceStatus = kAcceptanceStateRejected;
            QTr.AcceptanceStatus = kAcceptanceStateNotStarted;// Edit ************************** Tuesday, 15 January 2013 14:26:05
            RecordUpdate(oldQTr,QTr,true);
            SetAcceptanceTasksRejectedForAllLevels("QTVc",QTr.SerNr,bc1v,Actr,Acptr);
          end;
          if (Actr.ActResult==Acptr.AcceptedActType) then begin
            testf = AcceptanceTasksAcceptedForAllLevels("QTVc",QTr.SerNr,bc1v,Actr,Acptr);            
            if (testf) then begin
              QTr.AcceptanceStatus = kAcceptanceStateApproved;
              if(QTr.AcceptanceStatus==kAcceptanceStateApproved)then begin
                If(blank(QTr.Authority))then begin
                  QTr.Authority = CurrentUser;// Edit ************************** Monday, 8 October 2012 17:03:03
                end;
              end;
              RecordUpdate(oldQTr,QTr,true);
            end;
          end;
        end;
      end;
    case "IntORVc":
      IntORr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(IntORr,1,true)) then begin
        if (ReadAcceptanceRules(kAcceptanceIntOR,"",Acptr)) then begin
//          bc1v = MulRateToBase1(IntORr.CurncyCode,IntORr.Sum4,IntORr.FrRate,IntORr.ToRateB1,IntORr.ToRateB2,IntORr.BaseRate1,IntORr.BaseRate2,DefaultCurRoundOff);
          bc1v = GetAcceptanceSum_IntORVc(IntORr);
          RecordCopy(oldIntORr,IntORr);
          if (Actr.ActResult==Acptr.RejectedActType) then begin
            IntORr.AcceptanceStatus = kAcceptanceStateRejected;
            RecordUpdate(oldIntORr,IntORr,true);
            SetAcceptanceTasksRejectedForAllLevels("IntORVc",IntORr.SerNr,bc1v,Actr,Acptr);
          end;
          if (Actr.ActResult==Acptr.AcceptedActType) then begin
            testf = AcceptanceTasksAcceptedForAllLevels("IntORVc",IntORr.SerNr,bc1v,Actr,Acptr);
            if (testf) then begin
              IntORr.AcceptanceStatus = kAcceptanceStateApproved;
              RecordUpdate(oldIntORr,IntORr,true);
            end;
          end;
        end;
      end;
    case "ExpVc":
      Expr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(Expr,1,true)) then begin
        if (ReadAcceptanceRules(kAcceptanceExp,"",Acptr)) then begin
          bc1v = GetAcceptanceSum_ExpVc(Expr);
          RecordCopy(oldExpr,Expr);
          if (Actr.ActResult==Acptr.RejectedActType) then begin
            Expr.AcceptanceStatus = kAcceptanceStateRejected;
            Expr.OKFlag = 0;
            RecordUpdate(oldExpr,Expr,true);
            SetAcceptanceTasksRejectedForAllLevels("ExpVc",Expr.SerNr,bc1v,Actr,Acptr);
          end;
          if (Actr.ActResult==Acptr.AcceptedActType) then begin
            testf = AcceptanceTasksAcceptedForAllLevels("ExpVc",Expr.SerNr,bc1v,Actr,Acptr);
            if (testf) then begin
              Expr.AcceptanceStatus = kAcceptanceStateApproved;
              RecordUpdate(oldExpr,Expr,true);
            end;
          end;
        end;
      end;
    case "PUVc":
      PUr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(PUr,1,true)) then begin
        if (ReadAcceptanceRules(kAcceptancePU,PUr.VECode,Acptr)) then begin
          bc1v = GetAcceptanceSum_PUVc(PUr);
          RecordCopy(oldPUr,PUr);
          if (Actr.ActResult==Acptr.RejectedActType) then begin
            PUr.AcceptanceStatus = kAcceptanceStateRejected;
            PUr.OKFlag = 0;
            RecordUpdate(oldPUr,PUr,true);
            SetAcceptanceTasksRejectedForAllLevels("PUVc",PUr.SerNr,bc1v,Actr,Acptr);
          end;
          if (Actr.ActResult==Acptr.AcceptedActType) then begin
            testf = AcceptanceTasksAcceptedForAllLevels("PUVc",PUr.SerNr,bc1v,Actr,Acptr);                        
            if (testf) then begin
              PUr.AcceptanceStatus = kAcceptanceStateApproved;
              PUr.OKFlag = 1;
              RecordUpdate(oldPUr,PUr,true);
            end;
          end;
        end;
      end;
    case "SDVc":
      SDr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(SDr,1,true)) then begin
        if (ReadAcceptanceRules(kAcceptanceSD,"",Acptr)) then begin
          bc1v = GetAcceptanceSum_SDVc(SDr);
          RecordCopy(oldSDr,SDr);
          if (Actr.ActResult==Acptr.RejectedActType) then begin
            SDr.AcceptanceStatus = kAcceptanceStateRejected;
            SDr.OKFlag = 0;
            RecordUpdate(oldSDr,SDr,true);
            SetAcceptanceTasksRejectedForAllLevels("SDVc",SDr.SerNr,bc1v,Actr,Acptr);
          end;
          if (Actr.ActResult==Acptr.AcceptedActType) then begin
            testf = AcceptanceTasksAcceptedForAllLevels("SDVc",SDr.SerNr,bc1v,Actr,Acptr);                        
            if (testf) then begin
              SDr.AcceptanceStatus = kAcceptanceStateApproved;
              SDr.OKFlag = 1;
              RecordUpdate(oldSDr,SDr,true);
            end;
          end;
        end;
      end;
    case "OPVc":
      OPr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(OPr,1,true)) then begin
        if (ReadAcceptanceRules(kAcceptanceOP,"",Acptr)) then begin
          bc1v = GetAcceptanceSum_OPVc(OPr);
          RecordCopy(oldOPr,OPr);
          if (Actr.ActResult==Acptr.RejectedActType) then begin
            OPr.AcceptanceStatus = kAcceptanceStateRejected;
            OPr.DoneFlag = 0;
            RecordUpdate(oldOPr,OPr,true);
            SetAcceptanceTasksRejectedForAllLevels("OPVc",OPr.SerNr,bc1v,Actr,Acptr);
          end;
          if (Actr.ActResult==Acptr.AcceptedActType) then begin
            testf = AcceptanceTasksAcceptedForAllLevels("OPVc",OPr.SerNr,bc1v,Actr,Acptr);                        
            if (testf) then begin
              OPr.AcceptanceStatus = kAcceptanceStateApproved;
              OPr.DoneFlag = 1;
              RecordUpdate(oldOPr,OPr,true);
            end;
          end;
        end;
      end;
  end;
  return;
end;

global
updating function Integer SendForAcceptance_LeaveTransferVc(var record LeaveTransferVc LTr)
begin
  Integer err,resAcceptanceStatus;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  record UserVc Userr;
  
  Userr.CustCode = LTr.Employee;
  if (ReadFirstKey("CustCode",Userr,1,true)==false) then begin
//    ??
//    goto LSendForAcceptance_LeaveTransferVc;
  end;
  resAcceptanceStatus = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptanceLeaveTransfer,LTr.Employee,Acptr)) then begin
    bc1v = GetAcceptanceSum_LeaveTransferVc(LTr);
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (LTr.AcceptanceStatus) begin
          case kAcceptanceStateNotStarted:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          case kAcceptanceStateNotRequested:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          otherwise
            err = 22400;
        end;
        i = rwcnt;
      end;
    end;
  end;
  LTr.AcceptanceStatus = resAcceptanceStatus;
  switch (resAcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    case kAcceptanceStatePending:
      CreateAcceptanceAlert("LeaveTransferVc",LTr.SerNr,Userr.Code,blankval,"",LTr.Employee,Acptr,foundAcptrw);
  end;
LSendForAcceptance_LeaveTransferVc:;  
  SendForAcceptance_LeaveTransferVc = err;
  return;
end;

global
updating function Integer SendForAcceptance_LeaveApplicationVc(var record LeaveApplicationVc LAr)
begin
  Integer err,resAcceptanceStatus;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  record UserVc Userr;

  Userr.CustCode = LAr.Employee;
  if (ReadFirstKey("CustCode",Userr,1,true)==false) then begin
//    ??
//    goto LSendForAcceptance_LeaveApplicationVc;
  end;
  resAcceptanceStatus = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptanceLeaveApplication,LAr.Employee,Acptr)) then begin
    bc1v = GetAcceptanceSum_LeaveApplicationVc(LAr);
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (LAr.AcceptanceStatus) begin
          case kAcceptanceStateNotStarted:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          case kAcceptanceStateNotRequested:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          otherwise
            err = 22400;
        end;
        i = rwcnt;
      end;
    end;
  end;
  LAr.AcceptanceStatus = resAcceptanceStatus;
  switch (resAcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    case kAcceptanceStatePending:
      CreateAcceptanceAlert("LeaveApplicationVc",LAr.SerNr,Userr.Code,LAr.Days,USetStr(22430),LAr.Name,Acptr,foundAcptrw);
  end;
LSendForAcceptance_LeaveApplicationVc:; 
  SendForAcceptance_LeaveApplicationVc = err;
  return;
end;

